/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements. See the NOTICE file distributed with this
work for additional information regarding copyright ownership. The ASF
licenses this file to You under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
*/
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: worker.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoadAction int32

const (
	LoadAction_LoadVertex    LoadAction = 0
	LoadAction_LoadScatter   LoadAction = 1
	LoadAction_LoadEdge      LoadAction = 2
	LoadAction_LoadOutDegree LoadAction = 3
)

// Enum value maps for LoadAction.
var (
	LoadAction_name = map[int32]string{
		0: "LoadVertex",
		1: "LoadScatter",
		2: "LoadEdge",
		3: "LoadOutDegree",
	}
	LoadAction_value = map[string]int32{
		"LoadVertex":    0,
		"LoadScatter":   1,
		"LoadEdge":      2,
		"LoadOutDegree": 3,
	}
)

func (x LoadAction) Enum() *LoadAction {
	p := new(LoadAction)
	*p = x
	return p
}

func (x LoadAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadAction) Descriptor() protoreflect.EnumDescriptor {
	return file_worker_proto_enumTypes[0].Descriptor()
}

func (LoadAction) Type() protoreflect.EnumType {
	return &file_worker_proto_enumTypes[0]
}

func (x LoadAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadAction.Descriptor instead.
func (LoadAction) EnumDescriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

type SettingAction int32

const (
	SettingAction_SetOutEdges  SettingAction = 0
	SettingAction_SetOutDegree SettingAction = 1
)

// Enum value maps for SettingAction.
var (
	SettingAction_name = map[int32]string{
		0: "SetOutEdges",
		1: "SetOutDegree",
	}
	SettingAction_value = map[string]int32{
		"SetOutEdges":  0,
		"SetOutDegree": 1,
	}
)

func (x SettingAction) Enum() *SettingAction {
	p := new(SettingAction)
	*p = x
	return p
}

func (x SettingAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettingAction) Descriptor() protoreflect.EnumDescriptor {
	return file_worker_proto_enumTypes[1].Descriptor()
}

func (SettingAction) Type() protoreflect.EnumType {
	return &file_worker_proto_enumTypes[1]
}

func (x SettingAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettingAction.Descriptor instead.
func (SettingAction) EnumDescriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

type HelloPeerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	SourceName string       `protobuf:"bytes,2,opt,name=SourceName,proto3" json:"SourceName,omitempty"`
	TargetName string       `protobuf:"bytes,3,opt,name=TargetName,proto3" json:"TargetName,omitempty"`
	WorkerPeer string       `protobuf:"bytes,4,opt,name=workerPeer,proto3" json:"workerPeer,omitempty"`
	Id         int32        `protobuf:"varint,5,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *HelloPeerReq) Reset() {
	*x = HelloPeerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloPeerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloPeerReq) ProtoMessage() {}

func (x *HelloPeerReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloPeerReq.ProtoReflect.Descriptor instead.
func (*HelloPeerReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

func (x *HelloPeerReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *HelloPeerReq) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *HelloPeerReq) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *HelloPeerReq) GetWorkerPeer() string {
	if x != nil {
		return x.WorkerPeer
	}
	return ""
}

func (x *HelloPeerReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HelloPeerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Status string        `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *HelloPeerResp) Reset() {
	*x = HelloPeerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloPeerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloPeerResp) ProtoMessage() {}

func (x *HelloPeerResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloPeerResp.ProtoReflect.Descriptor instead.
func (*HelloPeerResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

func (x *HelloPeerResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *HelloPeerResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ScatterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Step       int32        `protobuf:"varint,2,opt,name=Step,proto3" json:"Step,omitempty"`
	TaskId     int32        `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Count      int32        `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
	WorkerName string       `protobuf:"bytes,5,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	End        bool         `protobuf:"varint,6,opt,name=End,proto3" json:"End,omitempty"`
	SIdx       int32        `protobuf:"varint,7,opt,name=SIdx,proto3" json:"SIdx,omitempty"`
	Data       []byte       `protobuf:"bytes,10,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ScatterReq) Reset() {
	*x = ScatterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScatterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScatterReq) ProtoMessage() {}

func (x *ScatterReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScatterReq.ProtoReflect.Descriptor instead.
func (*ScatterReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{2}
}

func (x *ScatterReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ScatterReq) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *ScatterReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ScatterReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ScatterReq) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *ScatterReq) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *ScatterReq) GetSIdx() int32 {
	if x != nil {
		return x.SIdx
	}
	return 0
}

func (x *ScatterReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScatterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Step       int32         `protobuf:"varint,2,opt,name=Step,proto3" json:"Step,omitempty"`
	TaskId     int32         `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Count      int32         `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
	WorkerName string        `protobuf:"bytes,5,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	End        bool          `protobuf:"varint,6,opt,name=End,proto3" json:"End,omitempty"`
	SIdx       int32         `protobuf:"varint,7,opt,name=SIdx,proto3" json:"SIdx,omitempty"`
	Data       []byte        `protobuf:"bytes,10,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ScatterResp) Reset() {
	*x = ScatterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScatterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScatterResp) ProtoMessage() {}

func (x *ScatterResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScatterResp.ProtoReflect.Descriptor instead.
func (*ScatterResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{3}
}

func (x *ScatterResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ScatterResp) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *ScatterResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ScatterResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ScatterResp) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *ScatterResp) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *ScatterResp) GetSIdx() int32 {
	if x != nil {
		return x.SIdx
	}
	return 0
}

func (x *ScatterResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoadActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Action     LoadAction   `protobuf:"varint,2,opt,name=action,proto3,enum=master.LoadAction" json:"action,omitempty"`
	TaskId     int32        `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	PartId     int32        `protobuf:"varint,4,opt,name=PartId,proto3" json:"PartId,omitempty"`
	Count      int32        `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	WorkerName string       `protobuf:"bytes,6,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	End        bool         `protobuf:"varint,7,opt,name=End,proto3" json:"End,omitempty"`
	Num        int32        `protobuf:"varint,8,opt,name=Num,proto3" json:"Num,omitempty"`
	Data       []byte       `protobuf:"bytes,10,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *LoadActionReq) Reset() {
	*x = LoadActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadActionReq) ProtoMessage() {}

func (x *LoadActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadActionReq.ProtoReflect.Descriptor instead.
func (*LoadActionReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{4}
}

func (x *LoadActionReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoadActionReq) GetAction() LoadAction {
	if x != nil {
		return x.Action
	}
	return LoadAction_LoadVertex
}

func (x *LoadActionReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *LoadActionReq) GetPartId() int32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *LoadActionReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LoadActionReq) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *LoadActionReq) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *LoadActionReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *LoadActionReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoadActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Action     LoadAction    `protobuf:"varint,2,opt,name=action,proto3,enum=master.LoadAction" json:"action,omitempty"`
	TaskId     int32         `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	PartId     int32         `protobuf:"varint,4,opt,name=PartId,proto3" json:"PartId,omitempty"`
	Count      int32         `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	WorkerName string        `protobuf:"bytes,6,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	End        bool          `protobuf:"varint,7,opt,name=End,proto3" json:"End,omitempty"`
	Num        int32         `protobuf:"varint,8,opt,name=Num,proto3" json:"Num,omitempty"`
	Data       []byte        `protobuf:"bytes,10,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *LoadActionResp) Reset() {
	*x = LoadActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadActionResp) ProtoMessage() {}

func (x *LoadActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadActionResp.ProtoReflect.Descriptor instead.
func (*LoadActionResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{5}
}

func (x *LoadActionResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoadActionResp) GetAction() LoadAction {
	if x != nil {
		return x.Action
	}
	return LoadAction_LoadVertex
}

func (x *LoadActionResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *LoadActionResp) GetPartId() int32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *LoadActionResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LoadActionResp) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *LoadActionResp) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *LoadActionResp) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *LoadActionResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetEdgesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	GraphName string       `protobuf:"bytes,2,opt,name=GraphName,proto3" json:"GraphName,omitempty"`
	VertexId  string       `protobuf:"bytes,3,opt,name=VertexId,proto3" json:"VertexId,omitempty"`
	Direction string       `protobuf:"bytes,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	SpaceName string       `protobuf:"bytes,5,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *GetEdgesReq) Reset() {
	*x = GetEdgesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEdgesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEdgesReq) ProtoMessage() {}

func (x *GetEdgesReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEdgesReq.ProtoReflect.Descriptor instead.
func (*GetEdgesReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{6}
}

func (x *GetEdgesReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetEdgesReq) GetGraphName() string {
	if x != nil {
		return x.GraphName
	}
	return ""
}

func (x *GetEdgesReq) GetVertexId() string {
	if x != nil {
		return x.VertexId
	}
	return ""
}

func (x *GetEdgesReq) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetEdgesReq) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type GetEdgesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *BaseResponse   `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	InEdges        []string        `protobuf:"bytes,2,rep,name=InEdges,proto3" json:"InEdges,omitempty"`
	OutEdges       []string        `protobuf:"bytes,3,rep,name=OutEdges,proto3" json:"OutEdges,omitempty"`
	InEdgeProperty []*EdgeProperty `protobuf:"bytes,4,rep,name=InEdgeProperty,proto3" json:"InEdgeProperty,omitempty"`
}

func (x *GetEdgesResp) Reset() {
	*x = GetEdgesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEdgesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEdgesResp) ProtoMessage() {}

func (x *GetEdgesResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEdgesResp.ProtoReflect.Descriptor instead.
func (*GetEdgesResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{7}
}

func (x *GetEdgesResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetEdgesResp) GetInEdges() []string {
	if x != nil {
		return x.InEdges
	}
	return nil
}

func (x *GetEdgesResp) GetOutEdges() []string {
	if x != nil {
		return x.OutEdges
	}
	return nil
}

func (x *GetEdgesResp) GetInEdgeProperty() []*EdgeProperty {
	if x != nil {
		return x.InEdgeProperty
	}
	return nil
}

type EdgeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edge     string            `protobuf:"bytes,1,opt,name=Edge,proto3" json:"Edge,omitempty"`
	Property map[string]string `protobuf:"bytes,2,rep,name=Property,proto3" json:"Property,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EdgeProperty) Reset() {
	*x = EdgeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeProperty) ProtoMessage() {}

func (x *EdgeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeProperty.ProtoReflect.Descriptor instead.
func (*EdgeProperty) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{8}
}

func (x *EdgeProperty) GetEdge() string {
	if x != nil {
		return x.Edge
	}
	return ""
}

func (x *EdgeProperty) GetProperty() map[string]string {
	if x != nil {
		return x.Property
	}
	return nil
}

type VertexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Property map[string]string `protobuf:"bytes,2,rep,name=Property,proto3" json:"Property,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VertexInfo) Reset() {
	*x = VertexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexInfo) ProtoMessage() {}

func (x *VertexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexInfo.ProtoReflect.Descriptor instead.
func (*VertexInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{9}
}

func (x *VertexInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VertexInfo) GetProperty() map[string]string {
	if x != nil {
		return x.Property
	}
	return nil
}

type GetVertexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	GraphName string       `protobuf:"bytes,2,opt,name=GraphName,proto3" json:"GraphName,omitempty"`
	VertexId  []string     `protobuf:"bytes,3,rep,name=VertexId,proto3" json:"VertexId,omitempty"`
	SpaceName string       `protobuf:"bytes,4,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *GetVertexReq) Reset() {
	*x = GetVertexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertexReq) ProtoMessage() {}

func (x *GetVertexReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertexReq.ProtoReflect.Descriptor instead.
func (*GetVertexReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{10}
}

func (x *GetVertexReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetVertexReq) GetGraphName() string {
	if x != nil {
		return x.GraphName
	}
	return ""
}

func (x *GetVertexReq) GetVertexId() []string {
	if x != nil {
		return x.VertexId
	}
	return nil
}

func (x *GetVertexReq) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type GetVertexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Verts []*VertexInfo `protobuf:"bytes,2,rep,name=Verts,proto3" json:"Verts,omitempty"`
}

func (x *GetVertexResp) Reset() {
	*x = GetVertexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertexResp) ProtoMessage() {}

func (x *GetVertexResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertexResp.ProtoReflect.Descriptor instead.
func (*GetVertexResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{11}
}

func (x *GetVertexResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetVertexResp) GetVerts() []*VertexInfo {
	if x != nil {
		return x.Verts
	}
	return nil
}

type DeleteGraphReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	GraphName  string       `protobuf:"bytes,2,opt,name=GraphName,proto3" json:"GraphName,omitempty"`
	SpaceName  string       `protobuf:"bytes,3,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DeleteFile bool         `protobuf:"varint,4,opt,name=DeleteFile,proto3" json:"DeleteFile,omitempty"`
}

func (x *DeleteGraphReq) Reset() {
	*x = DeleteGraphReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGraphReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGraphReq) ProtoMessage() {}

func (x *DeleteGraphReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGraphReq.ProtoReflect.Descriptor instead.
func (*DeleteGraphReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteGraphReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *DeleteGraphReq) GetGraphName() string {
	if x != nil {
		return x.GraphName
	}
	return ""
}

func (x *DeleteGraphReq) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *DeleteGraphReq) GetDeleteFile() bool {
	if x != nil {
		return x.DeleteFile
	}
	return false
}

type DeleteGraphResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *DeleteGraphResp) Reset() {
	*x = DeleteGraphResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGraphResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGraphResp) ProtoMessage() {}

func (x *DeleteGraphResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGraphResp.ProtoReflect.Descriptor instead.
func (*DeleteGraphResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteGraphResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

type StepEndReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	TaskId     int32        `protobuf:"varint,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	WorkerName string       `protobuf:"bytes,3,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
}

func (x *StepEndReq) Reset() {
	*x = StepEndReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepEndReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepEndReq) ProtoMessage() {}

func (x *StepEndReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepEndReq.ProtoReflect.Descriptor instead.
func (*StepEndReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{14}
}

func (x *StepEndReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StepEndReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StepEndReq) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

type StepEndResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	TaskId     int32        `protobuf:"varint,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	WorkerName string       `protobuf:"bytes,3,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
}

func (x *StepEndResp) Reset() {
	*x = StepEndResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepEndResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepEndResp) ProtoMessage() {}

func (x *StepEndResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepEndResp.ProtoReflect.Descriptor instead.
func (*StepEndResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{15}
}

func (x *StepEndResp) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StepEndResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StepEndResp) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

type ControlTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	TaskID int32        `protobuf:"varint,2,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Action int32        `protobuf:"varint,3,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *ControlTaskReq) Reset() {
	*x = ControlTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlTaskReq) ProtoMessage() {}

func (x *ControlTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlTaskReq.ProtoReflect.Descriptor instead.
func (*ControlTaskReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{16}
}

func (x *ControlTaskReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ControlTaskReq) GetTaskID() int32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ControlTaskReq) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type ControlTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *ControlTaskResp) Reset() {
	*x = ControlTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlTaskResp) ProtoMessage() {}

func (x *ControlTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlTaskResp.ProtoReflect.Descriptor instead.
func (*ControlTaskResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{17}
}

func (x *ControlTaskResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

type GraphPersistenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	GraphName   string       `protobuf:"bytes,2,opt,name=GraphName,proto3" json:"GraphName,omitempty"`
	CreatedTime int64        `protobuf:"varint,3,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`
	UpdateTime  int64        `protobuf:"varint,4,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	SpaceName   string       `protobuf:"bytes,5,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *GraphPersistenceReq) Reset() {
	*x = GraphPersistenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphPersistenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPersistenceReq) ProtoMessage() {}

func (x *GraphPersistenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPersistenceReq.ProtoReflect.Descriptor instead.
func (*GraphPersistenceReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{18}
}

func (x *GraphPersistenceReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GraphPersistenceReq) GetGraphName() string {
	if x != nil {
		return x.GraphName
	}
	return ""
}

func (x *GraphPersistenceReq) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *GraphPersistenceReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GraphPersistenceReq) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type GraphPersistenceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *GraphPersistenceResp) Reset() {
	*x = GraphPersistenceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphPersistenceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPersistenceResp) ProtoMessage() {}

func (x *GraphPersistenceResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPersistenceResp.ProtoReflect.Descriptor instead.
func (*GraphPersistenceResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{19}
}

func (x *GraphPersistenceResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

type WorkerStatInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *WorkerStatInfoReq) Reset() {
	*x = WorkerStatInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStatInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatInfoReq) ProtoMessage() {}

func (x *WorkerStatInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatInfoReq.ProtoReflect.Descriptor instead.
func (*WorkerStatInfoReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{20}
}

func (x *WorkerStatInfoReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

type WorkerStatInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                  *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	MemMachineUsedPercent float64       `protobuf:"fixed64,2,opt,name=MemMachineUsedPercent,proto3" json:"MemMachineUsedPercent,omitempty"`
	MemProcessUsedPercent float64       `protobuf:"fixed64,3,opt,name=MemProcessUsedPercent,proto3" json:"MemProcessUsedPercent,omitempty"`
}

func (x *WorkerStatInfoResp) Reset() {
	*x = WorkerStatInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStatInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatInfoResp) ProtoMessage() {}

func (x *WorkerStatInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatInfoResp.ProtoReflect.Descriptor instead.
func (*WorkerStatInfoResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{21}
}

func (x *WorkerStatInfoResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WorkerStatInfoResp) GetMemMachineUsedPercent() float64 {
	if x != nil {
		return x.MemMachineUsedPercent
	}
	return 0
}

func (x *WorkerStatInfoResp) GetMemProcessUsedPercent() float64 {
	if x != nil {
		return x.MemProcessUsedPercent
	}
	return 0
}

type SettingActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest  `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Action     SettingAction `protobuf:"varint,2,opt,name=action,proto3,enum=master.SettingAction" json:"action,omitempty"`
	TaskId     int32         `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	PartId     int32         `protobuf:"varint,4,opt,name=PartId,proto3" json:"PartId,omitempty"`
	WorkerName string        `protobuf:"bytes,5,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	End        bool          `protobuf:"varint,6,opt,name=End,proto3" json:"End,omitempty"`
	Num        int32         `protobuf:"varint,7,opt,name=Num,proto3" json:"Num,omitempty"`
	Data       []byte        `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SettingActionReq) Reset() {
	*x = SettingActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingActionReq) ProtoMessage() {}

func (x *SettingActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingActionReq.ProtoReflect.Descriptor instead.
func (*SettingActionReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{22}
}

func (x *SettingActionReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SettingActionReq) GetAction() SettingAction {
	if x != nil {
		return x.Action
	}
	return SettingAction_SetOutEdges
}

func (x *SettingActionReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SettingActionReq) GetPartId() int32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *SettingActionReq) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *SettingActionReq) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *SettingActionReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SettingActionReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SettingActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseRequest  `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Action     SettingAction `protobuf:"varint,2,opt,name=action,proto3,enum=master.SettingAction" json:"action,omitempty"`
	TaskId     int32         `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	PartId     int32         `protobuf:"varint,4,opt,name=PartId,proto3" json:"PartId,omitempty"`
	WorkerName string        `protobuf:"bytes,5,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	End        bool          `protobuf:"varint,6,opt,name=End,proto3" json:"End,omitempty"`
	Num        int32         `protobuf:"varint,7,opt,name=Num,proto3" json:"Num,omitempty"`
	Data       []byte        `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SettingActionResp) Reset() {
	*x = SettingActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingActionResp) ProtoMessage() {}

func (x *SettingActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingActionResp.ProtoReflect.Descriptor instead.
func (*SettingActionResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{23}
}

func (x *SettingActionResp) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SettingActionResp) GetAction() SettingAction {
	if x != nil {
		return x.Action
	}
	return SettingAction_SetOutEdges
}

func (x *SettingActionResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SettingActionResp) GetPartId() int32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *SettingActionResp) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *SettingActionResp) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *SettingActionResp) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SettingActionResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RuntimeActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RuntimeActionReq_HostInfoReq
	//	*RuntimeActionReq_MemoryLimitReq
	//	*RuntimeActionReq_CPULimitReq
	Request isRuntimeActionReq_Request `protobuf_oneof:"request"`
}

func (x *RuntimeActionReq) Reset() {
	*x = RuntimeActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeActionReq) ProtoMessage() {}

func (x *RuntimeActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeActionReq.ProtoReflect.Descriptor instead.
func (*RuntimeActionReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{24}
}

func (m *RuntimeActionReq) GetRequest() isRuntimeActionReq_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RuntimeActionReq) GetHostInfoReq() *GetHostInfoReq {
	if x, ok := x.GetRequest().(*RuntimeActionReq_HostInfoReq); ok {
		return x.HostInfoReq
	}
	return nil
}

func (x *RuntimeActionReq) GetMemoryLimitReq() *SetMemoryLimitReq {
	if x, ok := x.GetRequest().(*RuntimeActionReq_MemoryLimitReq); ok {
		return x.MemoryLimitReq
	}
	return nil
}

func (x *RuntimeActionReq) GetCPULimitReq() *SetCPULimitReq {
	if x, ok := x.GetRequest().(*RuntimeActionReq_CPULimitReq); ok {
		return x.CPULimitReq
	}
	return nil
}

type isRuntimeActionReq_Request interface {
	isRuntimeActionReq_Request()
}

type RuntimeActionReq_HostInfoReq struct {
	HostInfoReq *GetHostInfoReq `protobuf:"bytes,1,opt,name=HostInfoReq,proto3,oneof"`
}

type RuntimeActionReq_MemoryLimitReq struct {
	MemoryLimitReq *SetMemoryLimitReq `protobuf:"bytes,2,opt,name=MemoryLimitReq,proto3,oneof"`
}

type RuntimeActionReq_CPULimitReq struct {
	CPULimitReq *SetCPULimitReq `protobuf:"bytes,3,opt,name=CPULimitReq,proto3,oneof"`
}

func (*RuntimeActionReq_HostInfoReq) isRuntimeActionReq_Request() {}

func (*RuntimeActionReq_MemoryLimitReq) isRuntimeActionReq_Request() {}

func (*RuntimeActionReq_CPULimitReq) isRuntimeActionReq_Request() {}

type GetHostInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *GetHostInfoReq) Reset() {
	*x = GetHostInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostInfoReq) ProtoMessage() {}

func (x *GetHostInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostInfoReq.ProtoReflect.Descriptor instead.
func (*GetHostInfoReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{25}
}

func (x *GetHostInfoReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

type SetMemoryLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	MaxMemoryUsed        uint32       `protobuf:"varint,2,opt,name=MaxMemoryUsed,proto3" json:"MaxMemoryUsed,omitempty"`
	MinRemainMemory      uint32       `protobuf:"varint,3,opt,name=MinRemainMemory,proto3" json:"MinRemainMemory,omitempty"`
	SoftMemoryLimitRatio float32      `protobuf:"fixed32,4,opt,name=SoftMemoryLimitRatio,proto3" json:"SoftMemoryLimitRatio,omitempty"`
}

func (x *SetMemoryLimitReq) Reset() {
	*x = SetMemoryLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMemoryLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMemoryLimitReq) ProtoMessage() {}

func (x *SetMemoryLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMemoryLimitReq.ProtoReflect.Descriptor instead.
func (*SetMemoryLimitReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{26}
}

func (x *SetMemoryLimitReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SetMemoryLimitReq) GetMaxMemoryUsed() uint32 {
	if x != nil {
		return x.MaxMemoryUsed
	}
	return 0
}

func (x *SetMemoryLimitReq) GetMinRemainMemory() uint32 {
	if x != nil {
		return x.MinRemainMemory
	}
	return 0
}

func (x *SetMemoryLimitReq) GetSoftMemoryLimitRatio() float32 {
	if x != nil {
		return x.SoftMemoryLimitRatio
	}
	return 0
}

type SetCPULimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseRequest `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	MaxCPU uint32       `protobuf:"varint,2,opt,name=MaxCPU,proto3" json:"MaxCPU,omitempty"`
}

func (x *SetCPULimitReq) Reset() {
	*x = SetCPULimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCPULimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCPULimitReq) ProtoMessage() {}

func (x *SetCPULimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCPULimitReq.ProtoReflect.Descriptor instead.
func (*SetCPULimitReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{27}
}

func (x *SetCPULimitReq) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SetCPULimitReq) GetMaxCPU() uint32 {
	if x != nil {
		return x.MaxCPU
	}
	return 0
}

type RuntimeActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RuntimeActionResp_HostInfoResp
	//	*RuntimeActionResp_MemoryLimitResp
	//	*RuntimeActionResp_CPULimitResp
	Response isRuntimeActionResp_Response `protobuf_oneof:"response"`
}

func (x *RuntimeActionResp) Reset() {
	*x = RuntimeActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeActionResp) ProtoMessage() {}

func (x *RuntimeActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeActionResp.ProtoReflect.Descriptor instead.
func (*RuntimeActionResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{28}
}

func (m *RuntimeActionResp) GetResponse() isRuntimeActionResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RuntimeActionResp) GetHostInfoResp() *GetHostInfoResp {
	if x, ok := x.GetResponse().(*RuntimeActionResp_HostInfoResp); ok {
		return x.HostInfoResp
	}
	return nil
}

func (x *RuntimeActionResp) GetMemoryLimitResp() *SetMemoryLimitResp {
	if x, ok := x.GetResponse().(*RuntimeActionResp_MemoryLimitResp); ok {
		return x.MemoryLimitResp
	}
	return nil
}

func (x *RuntimeActionResp) GetCPULimitResp() *SetCPULimitResp {
	if x, ok := x.GetResponse().(*RuntimeActionResp_CPULimitResp); ok {
		return x.CPULimitResp
	}
	return nil
}

type isRuntimeActionResp_Response interface {
	isRuntimeActionResp_Response()
}

type RuntimeActionResp_HostInfoResp struct {
	HostInfoResp *GetHostInfoResp `protobuf:"bytes,1,opt,name=HostInfoResp,proto3,oneof"`
}

type RuntimeActionResp_MemoryLimitResp struct {
	MemoryLimitResp *SetMemoryLimitResp `protobuf:"bytes,2,opt,name=MemoryLimitResp,proto3,oneof"`
}

type RuntimeActionResp_CPULimitResp struct {
	CPULimitResp *SetCPULimitResp `protobuf:"bytes,3,opt,name=CPULimitResp,proto3,oneof"`
}

func (*RuntimeActionResp_HostInfoResp) isRuntimeActionResp_Response() {}

func (*RuntimeActionResp_MemoryLimitResp) isRuntimeActionResp_Response() {}

func (*RuntimeActionResp_CPULimitResp) isRuntimeActionResp_Response() {}

type GetHostInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base            *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	TotalMemory     uint32        `protobuf:"varint,2,opt,name=TotalMemory,proto3" json:"TotalMemory,omitempty"`
	AvailableMemory uint32        `protobuf:"varint,3,opt,name=AvailableMemory,proto3" json:"AvailableMemory,omitempty"`
	// 逻辑核数
	CPUCount uint32 `protobuf:"varint,4,opt,name=CPUCount,proto3" json:"CPUCount,omitempty"`
}

func (x *GetHostInfoResp) Reset() {
	*x = GetHostInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostInfoResp) ProtoMessage() {}

func (x *GetHostInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostInfoResp.ProtoReflect.Descriptor instead.
func (*GetHostInfoResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{29}
}

func (x *GetHostInfoResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetHostInfoResp) GetTotalMemory() uint32 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *GetHostInfoResp) GetAvailableMemory() uint32 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

func (x *GetHostInfoResp) GetCPUCount() uint32 {
	if x != nil {
		return x.CPUCount
	}
	return 0
}

type SetMemoryLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *SetMemoryLimitResp) Reset() {
	*x = SetMemoryLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMemoryLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMemoryLimitResp) ProtoMessage() {}

func (x *SetMemoryLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMemoryLimitResp.ProtoReflect.Descriptor instead.
func (*SetMemoryLimitResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{30}
}

func (x *SetMemoryLimitResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

type SetCPULimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseResponse `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (x *SetCPULimitResp) Reset() {
	*x = SetCPULimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCPULimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCPULimitResp) ProtoMessage() {}

func (x *SetCPULimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCPULimitResp.ProtoReflect.Descriptor instead.
func (*SetCPULimitResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{31}
}

func (x *SetCPULimitResp) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

var File_worker_proto protoreflect.FileDescriptor

var file_worker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xd1, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x49, 0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x49, 0x64,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x49, 0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x53, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x82, 0x02, 0x0a, 0x0d,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x84, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x64,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x75, 0x74, 0x45, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4f,
	0x75, 0x74, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x45, 0x64, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0e, 0x49, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x56, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x56, 0x65, 0x72, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x3b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x22, 0x6d, 0x0a,
	0x0a, 0x53, 0x74, 0x65, 0x70, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0b,
	0x53, 0x74, 0x65, 0x70, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x27,
	0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x4d, 0x65, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x4d, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x22, 0xf2, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xda, 0x01, 0x0a, 0x10,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x3a, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x50, 0x55, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x0b, 0x43, 0x50, 0x55, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6f, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x53, 0x6f, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x50, 0x55,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x43, 0x50, 0x55, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00,
	0x52, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x50, 0x55, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x50, 0x55, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x43, 0x50, 0x55, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43,
	0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x50,
	0x55, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x4e, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x10, 0x03, 0x2a, 0x32, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x10, 0x01, 0x32, 0xb7, 0x07, 0x0a, 0x06, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0a,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x37, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x53, 0x74, 0x65, 0x70, 0x45, 0x6e,
	0x64, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x40, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x1b, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worker_proto_rawDescOnce sync.Once
	file_worker_proto_rawDescData = file_worker_proto_rawDesc
)

func file_worker_proto_rawDescGZIP() []byte {
	file_worker_proto_rawDescOnce.Do(func() {
		file_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_proto_rawDescData)
	})
	return file_worker_proto_rawDescData
}

var file_worker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_worker_proto_goTypes = []interface{}{
	(LoadAction)(0),              // 0: master.LoadAction
	(SettingAction)(0),           // 1: master.SettingAction
	(*HelloPeerReq)(nil),         // 2: master.HelloPeerReq
	(*HelloPeerResp)(nil),        // 3: master.HelloPeerResp
	(*ScatterReq)(nil),           // 4: master.ScatterReq
	(*ScatterResp)(nil),          // 5: master.ScatterResp
	(*LoadActionReq)(nil),        // 6: master.LoadActionReq
	(*LoadActionResp)(nil),       // 7: master.LoadActionResp
	(*GetEdgesReq)(nil),          // 8: master.GetEdgesReq
	(*GetEdgesResp)(nil),         // 9: master.GetEdgesResp
	(*EdgeProperty)(nil),         // 10: master.EdgeProperty
	(*VertexInfo)(nil),           // 11: master.VertexInfo
	(*GetVertexReq)(nil),         // 12: master.GetVertexReq
	(*GetVertexResp)(nil),        // 13: master.GetVertexResp
	(*DeleteGraphReq)(nil),       // 14: master.DeleteGraphReq
	(*DeleteGraphResp)(nil),      // 15: master.DeleteGraphResp
	(*StepEndReq)(nil),           // 16: master.StepEndReq
	(*StepEndResp)(nil),          // 17: master.StepEndResp
	(*ControlTaskReq)(nil),       // 18: master.ControlTaskReq
	(*ControlTaskResp)(nil),      // 19: master.ControlTaskResp
	(*GraphPersistenceReq)(nil),  // 20: master.GraphPersistenceReq
	(*GraphPersistenceResp)(nil), // 21: master.GraphPersistenceResp
	(*WorkerStatInfoReq)(nil),    // 22: master.WorkerStatInfoReq
	(*WorkerStatInfoResp)(nil),   // 23: master.WorkerStatInfoResp
	(*SettingActionReq)(nil),     // 24: master.SettingActionReq
	(*SettingActionResp)(nil),    // 25: master.SettingActionResp
	(*RuntimeActionReq)(nil),     // 26: master.RuntimeActionReq
	(*GetHostInfoReq)(nil),       // 27: master.GetHostInfoReq
	(*SetMemoryLimitReq)(nil),    // 28: master.SetMemoryLimitReq
	(*SetCPULimitReq)(nil),       // 29: master.SetCPULimitReq
	(*RuntimeActionResp)(nil),    // 30: master.RuntimeActionResp
	(*GetHostInfoResp)(nil),      // 31: master.GetHostInfoResp
	(*SetMemoryLimitResp)(nil),   // 32: master.SetMemoryLimitResp
	(*SetCPULimitResp)(nil),      // 33: master.SetCPULimitResp
	nil,                          // 34: master.EdgeProperty.PropertyEntry
	nil,                          // 35: master.VertexInfo.PropertyEntry
	(*BaseRequest)(nil),          // 36: common.BaseRequest
	(*BaseResponse)(nil),         // 37: common.BaseResponse
}
var file_worker_proto_depIdxs = []int32{
	36, // 0: master.HelloPeerReq.Base:type_name -> common.BaseRequest
	37, // 1: master.HelloPeerResp.Base:type_name -> common.BaseResponse
	36, // 2: master.ScatterReq.Base:type_name -> common.BaseRequest
	37, // 3: master.ScatterResp.Base:type_name -> common.BaseResponse
	36, // 4: master.LoadActionReq.Base:type_name -> common.BaseRequest
	0,  // 5: master.LoadActionReq.action:type_name -> master.LoadAction
	37, // 6: master.LoadActionResp.Base:type_name -> common.BaseResponse
	0,  // 7: master.LoadActionResp.action:type_name -> master.LoadAction
	36, // 8: master.GetEdgesReq.Base:type_name -> common.BaseRequest
	37, // 9: master.GetEdgesResp.Base:type_name -> common.BaseResponse
	10, // 10: master.GetEdgesResp.InEdgeProperty:type_name -> master.EdgeProperty
	34, // 11: master.EdgeProperty.Property:type_name -> master.EdgeProperty.PropertyEntry
	35, // 12: master.VertexInfo.Property:type_name -> master.VertexInfo.PropertyEntry
	36, // 13: master.GetVertexReq.Base:type_name -> common.BaseRequest
	37, // 14: master.GetVertexResp.Base:type_name -> common.BaseResponse
	11, // 15: master.GetVertexResp.Verts:type_name -> master.VertexInfo
	36, // 16: master.DeleteGraphReq.Base:type_name -> common.BaseRequest
	37, // 17: master.DeleteGraphResp.Base:type_name -> common.BaseResponse
	36, // 18: master.StepEndReq.Base:type_name -> common.BaseRequest
	36, // 19: master.StepEndResp.Base:type_name -> common.BaseRequest
	36, // 20: master.ControlTaskReq.Base:type_name -> common.BaseRequest
	37, // 21: master.ControlTaskResp.Base:type_name -> common.BaseResponse
	36, // 22: master.GraphPersistenceReq.Base:type_name -> common.BaseRequest
	37, // 23: master.GraphPersistenceResp.Base:type_name -> common.BaseResponse
	36, // 24: master.WorkerStatInfoReq.Base:type_name -> common.BaseRequest
	37, // 25: master.WorkerStatInfoResp.Base:type_name -> common.BaseResponse
	36, // 26: master.SettingActionReq.Base:type_name -> common.BaseRequest
	1,  // 27: master.SettingActionReq.action:type_name -> master.SettingAction
	36, // 28: master.SettingActionResp.Base:type_name -> common.BaseRequest
	1,  // 29: master.SettingActionResp.action:type_name -> master.SettingAction
	27, // 30: master.RuntimeActionReq.HostInfoReq:type_name -> master.GetHostInfoReq
	28, // 31: master.RuntimeActionReq.MemoryLimitReq:type_name -> master.SetMemoryLimitReq
	29, // 32: master.RuntimeActionReq.CPULimitReq:type_name -> master.SetCPULimitReq
	36, // 33: master.GetHostInfoReq.Base:type_name -> common.BaseRequest
	36, // 34: master.SetMemoryLimitReq.Base:type_name -> common.BaseRequest
	36, // 35: master.SetCPULimitReq.Base:type_name -> common.BaseRequest
	31, // 36: master.RuntimeActionResp.HostInfoResp:type_name -> master.GetHostInfoResp
	32, // 37: master.RuntimeActionResp.MemoryLimitResp:type_name -> master.SetMemoryLimitResp
	33, // 38: master.RuntimeActionResp.CPULimitResp:type_name -> master.SetCPULimitResp
	37, // 39: master.GetHostInfoResp.Base:type_name -> common.BaseResponse
	37, // 40: master.SetMemoryLimitResp.Base:type_name -> common.BaseResponse
	37, // 41: master.SetCPULimitResp.Base:type_name -> common.BaseResponse
	2,  // 42: master.Worker.SayHelloPeer:input_type -> master.HelloPeerReq
	4,  // 43: master.Worker.Scatter:input_type -> master.ScatterReq
	6,  // 44: master.Worker.LoadAction:input_type -> master.LoadActionReq
	8,  // 45: master.Worker.GetEdges:input_type -> master.GetEdgesReq
	12, // 46: master.Worker.GetVertex:input_type -> master.GetVertexReq
	14, // 47: master.Worker.DeleteGraph:input_type -> master.DeleteGraphReq
	16, // 48: master.Worker.StepEnd:input_type -> master.StepEndReq
	18, // 49: master.Worker.ControlTask:input_type -> master.ControlTaskReq
	20, // 50: master.Worker.SaveGraph:input_type -> master.GraphPersistenceReq
	20, // 51: master.Worker.WriteDisk:input_type -> master.GraphPersistenceReq
	20, // 52: master.Worker.ReadGraph:input_type -> master.GraphPersistenceReq
	22, // 53: master.Worker.GetWorkerStatInfo:input_type -> master.WorkerStatInfoReq
	24, // 54: master.Worker.SettingAction:input_type -> master.SettingActionReq
	26, // 55: master.Worker.RuntimeAction:input_type -> master.RuntimeActionReq
	3,  // 56: master.Worker.SayHelloPeer:output_type -> master.HelloPeerResp
	5,  // 57: master.Worker.Scatter:output_type -> master.ScatterResp
	7,  // 58: master.Worker.LoadAction:output_type -> master.LoadActionResp
	9,  // 59: master.Worker.GetEdges:output_type -> master.GetEdgesResp
	13, // 60: master.Worker.GetVertex:output_type -> master.GetVertexResp
	15, // 61: master.Worker.DeleteGraph:output_type -> master.DeleteGraphResp
	17, // 62: master.Worker.StepEnd:output_type -> master.StepEndResp
	19, // 63: master.Worker.ControlTask:output_type -> master.ControlTaskResp
	21, // 64: master.Worker.SaveGraph:output_type -> master.GraphPersistenceResp
	21, // 65: master.Worker.WriteDisk:output_type -> master.GraphPersistenceResp
	21, // 66: master.Worker.ReadGraph:output_type -> master.GraphPersistenceResp
	23, // 67: master.Worker.GetWorkerStatInfo:output_type -> master.WorkerStatInfoResp
	25, // 68: master.Worker.SettingAction:output_type -> master.SettingActionResp
	30, // 69: master.Worker.RuntimeAction:output_type -> master.RuntimeActionResp
	56, // [56:70] is the sub-list for method output_type
	42, // [42:56] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_worker_proto_init() }
func file_worker_proto_init() {
	if File_worker_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloPeerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloPeerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScatterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScatterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEdgesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEdgesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGraphReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGraphResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepEndReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepEndResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphPersistenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphPersistenceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStatInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStatInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMemoryLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCPULimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMemoryLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCPULimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_worker_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*RuntimeActionReq_HostInfoReq)(nil),
		(*RuntimeActionReq_MemoryLimitReq)(nil),
		(*RuntimeActionReq_CPULimitReq)(nil),
	}
	file_worker_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*RuntimeActionResp_HostInfoResp)(nil),
		(*RuntimeActionResp_MemoryLimitResp)(nil),
		(*RuntimeActionResp_CPULimitResp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_proto_goTypes,
		DependencyIndexes: file_worker_proto_depIdxs,
		EnumInfos:         file_worker_proto_enumTypes,
		MessageInfos:      file_worker_proto_msgTypes,
	}.Build()
	File_worker_proto = out.File
	file_worker_proto_rawDesc = nil
	file_worker_proto_goTypes = nil
	file_worker_proto_depIdxs = nil
}
