/*
 * Copyright 2017 HugeGraph Authors
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to You under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.baidu.hugegraph.computer.core.receiver;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.baidu.hugegraph.computer.core.common.exception.ComputerException;
import com.baidu.hugegraph.computer.core.config.ComputerOptions;
import com.baidu.hugegraph.computer.core.config.Config;
import com.baidu.hugegraph.computer.core.io.RandomAccessInput;
import com.baidu.hugegraph.computer.core.network.buffer.ManagedBuffer;
import com.baidu.hugegraph.computer.core.sort.Sorter;
import com.baidu.hugegraph.computer.core.sort.flusher.OuterSortFlusher;
import com.baidu.hugegraph.computer.core.sort.flusher.PeekableIterator;
import com.baidu.hugegraph.computer.core.store.SuperstepFileGenerator;
import com.baidu.hugegraph.computer.core.store.hgkvfile.entry.KvEntry;

/**
 * Manage the buffers received for a partition and the files generated by
 * sorting the buffers to file. The type of data may be VERTEX, EDGE, and
 * MESSAGE.
 */
public abstract class MessageRecvPartition {

    private MessageRecvBuffers recvBuffers;
    /*
     * Used to sort the buffers that reached threshold
     * ComputerOptions.WORKER_RECEIVED_BUFFERS_BYTES_LIMIT.
     */
    private MessageRecvBuffers sortBuffers;
    private final Sorter sorter;

    private List<String> outputFiles;
    private final SuperstepFileGenerator fileGenerator;
    private final boolean withSubKv;
    private final int mergeFileNum;

    public MessageRecvPartition(Config config,
                                SuperstepFileGenerator fileGenerator,
                                Sorter sorter,
                                boolean withSubKv) {
        long buffersLimit = config.get(
             ComputerOptions.WORKER_RECEIVED_BUFFERS_BYTES_LIMIT);

        long waitSortTimeout = config.get(
                               ComputerOptions.WORKER_WAIT_SORT_TIMEOUT);
        this.mergeFileNum = config.get(ComputerOptions.HGKV_MERGE_FILES_NUM);
        this.fileGenerator = fileGenerator;
        this.recvBuffers = new MessageRecvBuffers(buffersLimit,
                                                  waitSortTimeout);
        this.sortBuffers = new MessageRecvBuffers(buffersLimit,
                                                  waitSortTimeout);
        this.outputFiles = new ArrayList<>();
        this.withSubKv = withSubKv;
        this.sorter = sorter;
    }

    /**
     * Only one thread can call this method.
     */
    public synchronized void addBuffer(ManagedBuffer buffer) {
        this.recvBuffers.addBuffer(buffer);
        if (this.recvBuffers.full()) {
            this.sortBuffers.waitSorted();
            this.swapReceiveAndSortBuffers();
            String path = this.fileGenerator.nextPath(this.type());
            this.mergeBuffers(this.sortBuffers, path);
            this.outputFiles.add(path);
        }
    }

    public PeekableIterator<KvEntry> iterator() {
        /*
         * TODO: create iterator directly from buffers if there is no
         *       outputFiles.
         */
        this.flushAllBuffersAndWaitSorted();
        this.mergeOutputFilesIfNeeded();
        if (this.outputFiles.size() == 0) {
            return PeekableIterator.emptyIterator();
        }
        try {
            return this.sorter.iterator(this.outputFiles, this.withSubKv);
        } catch (IOException e) {
            throw new ComputerException("Failed to iterate files: '%s'",
                                        this.outputFiles);
        }
    }

    protected abstract OuterSortFlusher outerSortFlusher();

    protected abstract String type();

    /**
     * Flush the receive buffers to file, and wait both recvBuffers and
     * sortBuffers to finish sorting.
     * After this method be called, can not call
     * {@link #addBuffer(ManagedBuffer)} any more.
     */
    private void flushAllBuffersAndWaitSorted() {
        this.sortBuffers.waitSorted();
        if (this.recvBuffers.totalBytes() > 0) {
            String path = this.fileGenerator.nextPath(this.type());
            this.mergeBuffers(this.recvBuffers, path);
            this.outputFiles.add(path);
        }
        this.recvBuffers.waitSorted();
    }

    // TODO: use another thread to sort buffers.
    private void mergeBuffers(MessageRecvBuffers buffers, String path) {
        List<RandomAccessInput> inputs = buffers.buffers();
        OuterSortFlusher flusher = this.outerSortFlusher();

        if (this.withSubKv) {
            flusher.sources(inputs.size());
        }
        try {
            this.sorter.mergeBuffers(inputs, flusher,
                                     path, this.withSubKv);
        } catch (Exception e) {
            throw new ComputerException(
                      "Failed to merge %s buffers to file '%s'",
                      e, inputs.size(), path);
        }

        buffers.signalSorted();
    }

    private void swapReceiveAndSortBuffers() {
        MessageRecvBuffers tmp = this.recvBuffers;
        this.recvBuffers = this.sortBuffers;
        this.sortBuffers = tmp;
    }


    /**
     * Merge outputFiles if needed, like merge 10000 files into 100 files.
     */
    private void mergeOutputFilesIfNeeded() {
        int actualSize = this.outputFiles.size();
        if (actualSize <= this.mergeFileNum) {
            return;
        }
        int targetSize = this.mergeFileNum;
        // If mergeFileNum = 200 and actual = 400, target = 20.
        if (actualSize < this.mergeFileNum * this.mergeFileNum) {
            targetSize = (int) Math.sqrt(actualSize);
        }

        List<String> outputs = this.genOutputFileNames(targetSize);
        OuterSortFlusher flusher = this.outerSortFlusher();
        if (this.withSubKv) {
            flusher.sources(actualSize);
        }
        try {
            this.sorter.mergeInputs(this.outputFiles, flusher,
                                    outputs, this.withSubKv);
        } catch (Exception e) {
            throw new ComputerException(
                      "Failed to merge %s files into %s files",
                      e, this.outputFiles.size(), outputs.size());
        }
        this.outputFiles = outputs;
    }

    private List<String> genOutputFileNames(int targetSize) {
        List<String> files = new ArrayList<>(targetSize);
        for (int i = 0; i < targetSize; i++) {
            files.add(this.fileGenerator.nextPath(this.type()));
        }
        return files;
    }
}
