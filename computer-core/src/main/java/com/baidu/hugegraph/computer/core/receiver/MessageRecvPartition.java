/*
 * Copyright 2017 HugeGraph Authors
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to You under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.baidu.hugegraph.computer.core.receiver;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.baidu.hugegraph.computer.core.combiner.Combiner;
import com.baidu.hugegraph.computer.core.config.ComputerOptions;
import com.baidu.hugegraph.computer.core.config.Config;
import com.baidu.hugegraph.computer.core.network.buffer.ManagedBuffer;
import com.baidu.hugegraph.computer.core.store.DataFileGenerator;
import com.baidu.hugegraph.util.E;

/**
 * Manage the buffers received for a partition and the files generated by
 * sorting the buffers to file. The type of data may be VERTEX, EDGE, and
 * MESSAGE.
 */
public abstract class MessageRecvPartition {

    private MessageRecvBuffers recvBuffers;
    /*
     * Used to sort the buffers that reached threshold
     * ComputerOptions.WORKER_RECEIVED_BUFFERS_BYTES_LIMIT.
     */
    private MessageRecvBuffers sortBuffers;

    private List<String> outputFiles;
    private final DataFileGenerator fileGenerator;
    private final int superstep;

    public MessageRecvPartition(Config config,
                                DataFileGenerator fileGenerator,
                                int superstep) {
        long buffersLimit = config.get(
             ComputerOptions.WORKER_RECEIVED_BUFFERS_BYTES_LIMIT);
        long waitSortTimeout = config.get(
                               ComputerOptions.WORKER_WAIT_SORT_TIMEOUT);
        this.recvBuffers = new MessageRecvBuffers(buffersLimit,
                                                  waitSortTimeout);
        this.sortBuffers = new MessageRecvBuffers(buffersLimit,
                                                  waitSortTimeout);
        this.outputFiles = new ArrayList<>();
        this.fileGenerator = fileGenerator;
        this.superstep = superstep;
    }

    /**
     * Only one thread can call this method.
     */
    public synchronized void addBuffer(ManagedBuffer buffer) {
        this.recvBuffers.addBuffer(buffer);
        if (this.recvBuffers.full()) {
            this.sortBuffers.waitSorted();
            this.swapReceiveAndSortBuffers();
            this.sortBuffers(this.sortBuffers);
        }
    }

    /**
     * Flush the receive buffers to file, and wait both recvBuffers and
     * sortBuffers to finish sorting.
     * After this method be called, can not call
     * {@link #addBuffer(ManagedBuffer)} any more.
     */
    public void flushAllBuffersAndWaitSorted() {
        this.sortBuffers.waitSorted();
        if (this.recvBuffers.totalBytes() > 0) {
            this.sortBuffers(this.recvBuffers);
        }
        this.recvBuffers.waitSorted();
    }

    public List<String> outputFiles() {
        return Collections.unmodifiableList(this.outputFiles);
    }

    /**
     * Merge the the outputFiles to n files. The vertex and edge files merge
     * into one file at the end of inputstep.
     */
    public void mergeOutputFiles(int n) {
        E.checkArgument(n > 0, "The parameter n must be > 0, but got %s", n);
        List<String> outputs = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            outputs.add(this.fileGenerator.nextFile(this.type(), this.superstep)
                                          .getAbsolutePath());
        }
        // TODO: call sort manager to merge m files into n files.
        this.outputFiles = outputs;
    }

    /**
     * @return The combiner used to sort buffers.
     */
    protected abstract Combiner<?> combiner();

    // TODO: create OuterSortFlusher;
    // protected abstract OuterSortFlusher outerSortFlusher();

    protected abstract String type();

    // TODO: use another thread to sort buffers.
    private void sortBuffers(MessageRecvBuffers buffers) {
        Combiner<?> combiner = this.combiner();
        File file = this.fileGenerator.nextFile(this.type(), this.superstep);
        // TODO: sort the buffers to file.
        this.outputFiles.add(file.getAbsolutePath());
        buffers.signalSorted();
    }

    private void swapReceiveAndSortBuffers() {
        MessageRecvBuffers tmp = this.recvBuffers;
        this.recvBuffers = this.sortBuffers;
        this.sortBuffers = tmp;
    }
}
