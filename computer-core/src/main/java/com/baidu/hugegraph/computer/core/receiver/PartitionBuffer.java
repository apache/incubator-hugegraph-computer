/*
 * Copyright 2017 HugeGraph Authors
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to You under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.baidu.hugegraph.computer.core.receiver;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import com.baidu.hugegraph.computer.core.combiner.Combiner;
import com.baidu.hugegraph.computer.core.config.ComputerOptions;
import com.baidu.hugegraph.computer.core.config.Config;
import com.baidu.hugegraph.computer.core.network.buffer.ManagedBuffer;
import com.baidu.hugegraph.computer.core.store.DataFileGenerator;
import com.baidu.hugegraph.config.ConfigOption;

/**
 * Manage the buffers received for a partition and the files generated by
 * sorting the buffers to file. The type of data may be vertex, edge, and
 * message.
 */
public abstract class PartitionBuffer {

    // Used to receive buffers.
    protected Buffers<byte[]> receive;
    // Used to sort the buffers that reach threshold.
    protected Buffers<byte[]> sort;

    private final List<String> files;
    private final DataFileGenerator fileGenerator;
    private final int superstep;

    public PartitionBuffer(Config config,
                           DataFileGenerator fileGenerator,
                           int superstep) {
        ConfigOption<Long> option =
                           ComputerOptions.WORKER_RECEIVED_BUFFERS_BYTES_LIMIT;
        long buffersLimit = config.get(option);
        long sortTimeout = config.get(ComputerOptions.WORKER_SORT_TIMEOUT);
        this.receive = new Buffers<>(buffersLimit, sortTimeout);
        this.sort = new Buffers<>(buffersLimit, sortTimeout);
        /*
         * Set the sort sorted, so the first time call sort.waitSorted() can
         * return immediately.
         */
        this.sort.signalSorted();
        this.files = new ArrayList<>();
        this.fileGenerator = fileGenerator;
        this.superstep = superstep;
    }

    /**
     * Only one thread can call this method.
     */
    public synchronized void addBuffer(ManagedBuffer buffer) {
        // TODO: does not use copy
        byte[] bytes = buffer.copyToByteArray();
        this.receive.addBuffer(bytes, bytes.length);
        if (this.receive.isFull()) {
            this.sort.waitSorted();
            this.swap();
            this.sortBuffers(this.sort);
        }
    }

    public List<String> onDiskFiles() {
        return this.files;
    }

    /**
     * @return The combiner used to sort buffers.
     */
    protected abstract Combiner<?> combiner();

    // TODO: create OutputFlusher
    // protected abstract OutputFlusher outputFlusher();

    protected abstract String type();

    // TODO: use another thread to sort buffers.
    private void sortBuffers(Buffers<byte[]> buffers) {
        Combiner<?> combiner = this.combiner();
        // TODO: use directory instead of file.
        File file = this.fileGenerator.nextFile(type(), this.superstep);
        // TODO: sort the buffers to file.
        this.files.add(file.getAbsolutePath());
        buffers.signalSorted();
    }

    private void swap() {
        Buffers<byte[]> tmp = this.receive;
        this.receive = this.sort;
        this.sort = tmp;
    }

    // Sort the receive buffers and wait sorted.
    public void sortReceiveBuffersAndWaitSorted() {
        if (this.receive.sumBytes() > 0) {
            this.sortBuffers(this.receive);
        }
        this.receive.waitSorted();
    }

    public void waitSortBuffersSorted() {
        this.sort.waitSorted();
    }
}
